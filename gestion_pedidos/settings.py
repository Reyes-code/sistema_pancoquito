"""
Django settings for gestion_pedidos project.

Generated by 'django-admin startproject' using Django 4.2.2.
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-op33r&hz2e)*osaf5ggbye*dcxlovx6jpr8io+r1o=x_)(^mkm'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False  # Cambiar a True temporalmente si necesitas depurar en PythonAnywhere

# Configuración para PythonAnywhere - REEMPLAZA 'tunombre' CON TU USUARIO REAL
PYTHONANYWHERE_USER = 'tunombre'
PYTHONANYWHERE_DOMAIN = f'{PYTHONANYWHERE_USER}.pythonanywhere.com'

CSRF_TRUSTED_ORIGINS = [
    f'https://{PYTHONANYWHERE_DOMAIN}',
]

ALLOWED_HOSTS = [
    PYTHONANYWHERE_DOMAIN,
    'localhost',
    '127.0.0.1'
]

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'pedidos'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

LOGIN_URL = '/login/'
LOGOUT_REDIRECT_URL = '/login/'

ROOT_URLCONF = 'gestion_pedidos.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'pedidos', 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'gestion_pedidos.wsgi.application'

# Database - SQLite para mayor simplicidad
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

# Internationalization
LANGUAGE_CODE = 'es-es'  # Cambiado a español
TIME_ZONE = 'America/Lima'  # Ajusta según tu zona horaria
USE_I18N = True
USE_TZ = True

# Static files (Simplificado para PythonAnywhere)
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')  # IMPORTANTE para PythonAnywhere
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'pedidos', 'static'),
]

# Archivos media (si los necesitas)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Simplificamos la seguridad para PythonAnywhere
SESSION_COOKIE_SECURE = False  # PythonAnywhere maneja esto automáticamente
CSRF_COOKIE_SECURE = False
SECURE_PROXY_SSL_HEADER = None  # No necesario en PythonAnywhere

# Para evitar problemas con WhiteNoise en PythonAnywhere
try:
    import whitenoise
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedStaticFilesStorage'
    MIDDLEWARE.insert(1, 'whitenoise.middleware.WhiteNoiseMiddleware')
except ImportError:
    pass